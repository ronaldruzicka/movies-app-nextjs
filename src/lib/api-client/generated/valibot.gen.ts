// This file is auto-generated by @hey-api/openapi-ts

import * as v from 'valibot';

export const vSearchMovieData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.object({
    query: v.string(),
    include_adult: v.optional(v.boolean(), false),
    language: v.optional(v.string(), 'en-US'),
    primary_release_year: v.optional(v.string()),
    page: v.optional(v.pipe(v.number(), v.integer()), 1),
    region: v.optional(v.string()),
    year: v.optional(v.string()),
  }),
});

/**
 * 200
 */
export const vSearchMovieResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vDiscoverMovieData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      certification: v.optional(v.string()),
      'certification.gte': v.optional(v.string()),
      'certification.lte': v.optional(v.string()),
      certification_country: v.optional(v.string()),
      include_adult: v.optional(v.boolean(), false),
      include_video: v.optional(v.boolean(), false),
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      primary_release_year: v.optional(v.pipe(v.number(), v.integer())),
      'primary_release_date.gte': v.optional(v.pipe(v.string(), v.isoDate())),
      'primary_release_date.lte': v.optional(v.pipe(v.string(), v.isoDate())),
      region: v.optional(v.string()),
      'release_date.gte': v.optional(v.pipe(v.string(), v.isoDate())),
      'release_date.lte': v.optional(v.pipe(v.string(), v.isoDate())),
      sort_by: v.optional(
        v.picklist([
          'original_title.asc',
          'original_title.desc',
          'popularity.asc',
          'popularity.desc',
          'revenue.asc',
          'revenue.desc',
          'primary_release_date.asc',
          'title.asc',
          'title.desc',
          'primary_release_date.desc',
          'vote_average.asc',
          'vote_average.desc',
          'vote_count.asc',
          'vote_count.desc',
        ]),
      ),
      'vote_average.gte': v.optional(v.number()),
      'vote_average.lte': v.optional(v.number()),
      'vote_count.gte': v.optional(v.number()),
      'vote_count.lte': v.optional(v.number()),
      watch_region: v.optional(v.string()),
      with_cast: v.optional(v.string()),
      with_companies: v.optional(v.string()),
      with_crew: v.optional(v.string()),
      with_genres: v.optional(v.string()),
      with_keywords: v.optional(v.string()),
      with_origin_country: v.optional(v.string()),
      with_original_language: v.optional(v.string()),
      with_people: v.optional(v.string()),
      with_release_type: v.optional(v.pipe(v.number(), v.integer())),
      'with_runtime.gte': v.optional(v.pipe(v.number(), v.integer())),
      'with_runtime.lte': v.optional(v.pipe(v.number(), v.integer())),
      with_watch_monetization_types: v.optional(v.string()),
      with_watch_providers: v.optional(v.string()),
      without_companies: v.optional(v.string()),
      without_genres: v.optional(v.string()),
      without_keywords: v.optional(v.string()),
      without_watch_providers: v.optional(v.string()),
      year: v.optional(v.pipe(v.number(), v.integer())),
    }),
  ),
});

/**
 * 200
 */
export const vDiscoverMovieResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMovieDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      append_to_response: v.optional(v.string()),
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vMovieDetailsResponse = v.object({
  adult: v.optional(v.boolean(), true),
  backdrop_path: v.optional(v.string()),
  belongs_to_collection: v.optional(v.unknown()),
  budget: v.optional(v.pipe(v.number(), v.integer()), 0),
  genres: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
      }),
    ),
  ),
  homepage: v.optional(v.string()),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  imdb_id: v.optional(v.string()),
  original_language: v.optional(v.string()),
  original_title: v.optional(v.string()),
  overview: v.optional(v.string()),
  popularity: v.optional(v.number(), 0),
  poster_path: v.optional(v.string()),
  production_companies: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        logo_path: v.optional(v.string()),
        name: v.optional(v.string()),
        origin_country: v.optional(v.string()),
      }),
    ),
  ),
  production_countries: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        name: v.optional(v.string()),
      }),
    ),
  ),
  release_date: v.optional(v.string()),
  revenue: v.optional(v.pipe(v.number(), v.integer()), 0),
  runtime: v.optional(v.pipe(v.number(), v.integer()), 0),
  spoken_languages: v.optional(
    v.array(
      v.object({
        english_name: v.optional(v.string()),
        iso_639_1: v.optional(v.string()),
        name: v.optional(v.string()),
      }),
    ),
  ),
  status: v.optional(v.string()),
  tagline: v.optional(v.string()),
  title: v.optional(v.string()),
  video: v.optional(v.boolean(), true),
  vote_average: v.optional(v.number(), 0),
  vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      append_to_response: v.optional(v.string()),
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesDetailsResponse = v.object({
  adult: v.optional(v.boolean(), true),
  backdrop_path: v.optional(v.string()),
  created_by: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        credit_id: v.optional(v.string()),
        name: v.optional(v.string()),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        profile_path: v.optional(v.string()),
      }),
    ),
  ),
  episode_run_time: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
  first_air_date: v.optional(v.string()),
  genres: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
      }),
    ),
  ),
  homepage: v.optional(v.string()),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  in_production: v.optional(v.boolean(), true),
  languages: v.optional(v.array(v.string())),
  last_air_date: v.optional(v.string()),
  last_episode_to_air: v.optional(
    v.object({
      id: v.optional(v.pipe(v.number(), v.integer()), 0),
      name: v.optional(v.string()),
      overview: v.optional(v.string()),
      vote_average: v.optional(v.number(), 0),
      vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      air_date: v.optional(v.string()),
      episode_number: v.optional(v.pipe(v.number(), v.integer()), 0),
      production_code: v.optional(v.string()),
      runtime: v.optional(v.pipe(v.number(), v.integer()), 0),
      season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
      show_id: v.optional(v.pipe(v.number(), v.integer()), 0),
      still_path: v.optional(v.string()),
    }),
  ),
  name: v.optional(v.string()),
  next_episode_to_air: v.optional(v.unknown()),
  networks: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        logo_path: v.optional(v.string()),
        name: v.optional(v.string()),
        origin_country: v.optional(v.string()),
      }),
    ),
  ),
  number_of_episodes: v.optional(v.pipe(v.number(), v.integer()), 0),
  number_of_seasons: v.optional(v.pipe(v.number(), v.integer()), 0),
  origin_country: v.optional(v.array(v.string())),
  original_language: v.optional(v.string()),
  original_name: v.optional(v.string()),
  overview: v.optional(v.string()),
  popularity: v.optional(v.number(), 0),
  poster_path: v.optional(v.string()),
  production_companies: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        logo_path: v.optional(v.string()),
        name: v.optional(v.string()),
        origin_country: v.optional(v.string()),
      }),
    ),
  ),
  production_countries: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        name: v.optional(v.string()),
      }),
    ),
  ),
  seasons: v.optional(
    v.array(
      v.object({
        air_date: v.optional(v.string()),
        episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        overview: v.optional(v.string()),
        poster_path: v.optional(v.string()),
        season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
        vote_average: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  spoken_languages: v.optional(
    v.array(
      v.object({
        english_name: v.optional(v.string()),
        iso_639_1: v.optional(v.string()),
        name: v.optional(v.string()),
      }),
    ),
  ),
  status: v.optional(v.string()),
  tagline: v.optional(v.string()),
  type: v.optional(v.string()),
  vote_average: v.optional(v.number(), 0),
  vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vSearchTvData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.object({
    query: v.string(),
    first_air_date_year: v.optional(v.pipe(v.number(), v.integer())),
    include_adult: v.optional(v.boolean(), false),
    language: v.optional(v.string(), 'en-US'),
    page: v.optional(v.pipe(v.number(), v.integer()), 1),
    year: v.optional(v.pipe(v.number(), v.integer())),
  }),
});

/**
 * 200
 */
export const vSearchTvResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        name: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vSearchMultiData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.object({
    query: v.string(),
    include_adult: v.optional(v.boolean(), false),
    language: v.optional(v.string(), 'en-US'),
    page: v.optional(v.pipe(v.number(), v.integer()), 1),
  }),
});

/**
 * 200
 */
export const vSearchMultiResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        title: v.optional(v.string()),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        poster_path: v.optional(v.string()),
        media_type: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        popularity: v.optional(v.number(), 0),
        release_date: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vSearchPersonData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.object({
    query: v.string(),
    include_adult: v.optional(v.boolean(), false),
    language: v.optional(v.string(), 'en-US'),
    page: v.optional(v.pipe(v.number(), v.integer()), 1),
  }),
});

/**
 * 200
 */
export const vSearchPersonResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
        known_for: v.optional(
          v.array(
            v.object({
              adult: v.optional(v.boolean(), true),
              backdrop_path: v.optional(v.string()),
              id: v.optional(v.pipe(v.number(), v.integer()), 0),
              title: v.optional(v.string()),
              original_language: v.optional(v.string()),
              original_title: v.optional(v.string()),
              overview: v.optional(v.string()),
              poster_path: v.optional(v.string()),
              media_type: v.optional(v.string()),
              genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
              popularity: v.optional(v.number(), 0),
              release_date: v.optional(v.string()),
              video: v.optional(v.boolean(), true),
              vote_average: v.optional(v.number(), 0),
              vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
            }),
          ),
        ),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vConfigurationDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vConfigurationDetailsResponse = v.object({
  images: v.optional(
    v.object({
      base_url: v.optional(v.string()),
      secure_base_url: v.optional(v.string()),
      backdrop_sizes: v.optional(v.array(v.string())),
      logo_sizes: v.optional(v.array(v.string())),
      poster_sizes: v.optional(v.array(v.string())),
      profile_sizes: v.optional(v.array(v.string())),
      still_sizes: v.optional(v.array(v.string())),
    }),
  ),
  change_keys: v.optional(v.array(v.string())),
});

export const vTvSeasonDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      append_to_response: v.optional(v.string()),
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeasonDetailsResponse = v.object({
  _id: v.optional(v.string()),
  air_date: v.optional(v.string()),
  episodes: v.optional(
    v.array(
      v.object({
        air_date: v.optional(v.string()),
        episode_number: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        overview: v.optional(v.string()),
        production_code: v.optional(v.string()),
        runtime: v.optional(v.pipe(v.number(), v.integer()), 0),
        season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
        show_id: v.optional(v.pipe(v.number(), v.integer()), 0),
        still_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        crew: v.optional(
          v.array(
            v.object({
              department: v.optional(v.string()),
              job: v.optional(v.string()),
              credit_id: v.optional(v.string()),
              adult: v.optional(v.boolean(), true),
              gender: v.optional(v.pipe(v.number(), v.integer()), 0),
              id: v.optional(v.pipe(v.number(), v.integer()), 0),
              known_for_department: v.optional(v.string()),
              name: v.optional(v.string()),
              original_name: v.optional(v.string()),
              popularity: v.optional(v.number(), 0),
              profile_path: v.optional(v.string()),
            }),
          ),
        ),
        guest_stars: v.optional(
          v.array(
            v.object({
              character: v.optional(v.string()),
              credit_id: v.optional(v.string()),
              order: v.optional(v.pipe(v.number(), v.integer()), 0),
              adult: v.optional(v.boolean(), true),
              gender: v.optional(v.pipe(v.number(), v.integer()), 0),
              id: v.optional(v.pipe(v.number(), v.integer()), 0),
              known_for_department: v.optional(v.string()),
              name: v.optional(v.string()),
              original_name: v.optional(v.string()),
              popularity: v.optional(v.number(), 0),
              profile_path: v.optional(v.string()),
            }),
          ),
        ),
      }),
    ),
  ),
  name: v.optional(v.string()),
  overview: v.optional(v.string()),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  poster_path: v.optional(v.string()),
  season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
  vote_average: v.optional(v.number(), 0),
});

export const vTvEpisodeDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
    episode_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      append_to_response: v.optional(v.string()),
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvEpisodeDetailsResponse = v.object({
  air_date: v.optional(v.string()),
  crew: v.optional(
    v.array(
      v.object({
        department: v.optional(v.string()),
        job: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
      }),
    ),
  ),
  episode_number: v.optional(v.pipe(v.number(), v.integer()), 0),
  guest_stars: v.optional(
    v.array(
      v.object({
        character: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        order: v.optional(v.pipe(v.number(), v.integer()), 0),
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
      }),
    ),
  ),
  name: v.optional(v.string()),
  overview: v.optional(v.string()),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  production_code: v.optional(v.string()),
  runtime: v.optional(v.pipe(v.number(), v.integer()), 0),
  season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
  still_path: v.optional(v.string()),
  vote_average: v.optional(v.number(), 0),
  vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vDiscoverTvData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      'air_date.gte': v.optional(v.pipe(v.string(), v.isoDate())),
      'air_date.lte': v.optional(v.pipe(v.string(), v.isoDate())),
      first_air_date_year: v.optional(v.pipe(v.number(), v.integer())),
      'first_air_date.gte': v.optional(v.pipe(v.string(), v.isoDate())),
      'first_air_date.lte': v.optional(v.pipe(v.string(), v.isoDate())),
      include_adult: v.optional(v.boolean(), false),
      include_null_first_air_dates: v.optional(v.boolean(), false),
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      screened_theatrically: v.optional(v.boolean()),
      sort_by: v.optional(
        v.picklist([
          'first_air_date.asc',
          'first_air_date.desc',
          'name.asc',
          'name.desc',
          'original_name.asc',
          'original_name.desc',
          'popularity.asc',
          'popularity.desc',
          'vote_average.asc',
          'vote_average.desc',
          'vote_count.asc',
          'vote_count.desc',
        ]),
      ),
      timezone: v.optional(v.string()),
      'vote_average.gte': v.optional(v.number()),
      'vote_average.lte': v.optional(v.number()),
      'vote_count.gte': v.optional(v.number()),
      'vote_count.lte': v.optional(v.number()),
      watch_region: v.optional(v.string()),
      with_companies: v.optional(v.string()),
      with_genres: v.optional(v.string()),
      with_keywords: v.optional(v.string()),
      with_networks: v.optional(v.pipe(v.number(), v.integer())),
      with_origin_country: v.optional(v.string()),
      with_original_language: v.optional(v.string()),
      'with_runtime.gte': v.optional(v.pipe(v.number(), v.integer())),
      'with_runtime.lte': v.optional(v.pipe(v.number(), v.integer())),
      with_status: v.optional(v.string()),
      with_watch_monetization_types: v.optional(v.string()),
      with_watch_providers: v.optional(v.string()),
      without_companies: v.optional(v.string()),
      without_genres: v.optional(v.string()),
      without_keywords: v.optional(v.string()),
      without_watch_providers: v.optional(v.string()),
      with_type: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vDiscoverTvResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        backdrop_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        vote_average: v.optional(v.pipe(v.number(), v.integer()), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMovieImagesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      include_image_language: v.optional(v.string()),
      language: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vMovieImagesResponse = v.object({
  backdrops: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.unknown()),
        file_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  logos: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.string()),
        file_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  posters: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.string()),
        file_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vTvSeriesImagesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      include_image_language: v.optional(v.string()),
      language: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesImagesResponse = v.object({
  backdrops: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.unknown()),
        file_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  logos: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.string()),
        file_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  posters: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.string()),
        file_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vTvSeasonImagesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      include_image_language: v.optional(v.string()),
      language: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeasonImagesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  posters: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.string()),
        file_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vTvEpisodeImagesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
    episode_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      include_image_language: v.optional(v.string()),
      language: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vTvEpisodeImagesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  stills: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.unknown()),
        file_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vTrendingAllData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    time_window: v.picklist(['day', 'week']),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTrendingAllResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        title: v.optional(v.string()),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        poster_path: v.optional(v.string()),
        media_type: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        popularity: v.optional(v.number(), 0),
        release_date: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTrendingMoviesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    time_window: v.picklist(['day', 'week']),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTrendingMoviesResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        title: v.optional(v.string()),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        poster_path: v.optional(v.string()),
        media_type: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        popularity: v.optional(v.number(), 0),
        release_date: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTrendingTvData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    time_window: v.picklist(['day', 'week']),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTrendingTvResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        poster_path: v.optional(v.string()),
        media_type: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        popularity: v.optional(v.number(), 0),
        first_air_date: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        origin_country: v.optional(v.array(v.string())),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMovieAccountStatesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      session_id: v.optional(v.string()),
      guest_session_id: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vMovieAccountStatesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  favorite: v.optional(v.boolean(), true),
  rated: v.optional(
    v.object({
      value: v.optional(v.pipe(v.number(), v.integer()), 0),
    }),
  ),
  watchlist: v.optional(v.boolean(), true),
});

export const vTvSeriesAccountStatesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      session_id: v.optional(v.string()),
      guest_session_id: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesAccountStatesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  favorite: v.optional(v.boolean(), true),
  rated: v.optional(
    v.object({
      value: v.optional(v.pipe(v.number(), v.integer()), 0),
    }),
  ),
  watchlist: v.optional(v.boolean(), true),
});

export const vTvEpisodeAccountStatesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
    episode_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      session_id: v.optional(v.string()),
      guest_session_id: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vTvEpisodeAccountStatesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  favorite: v.optional(v.boolean(), true),
  rated: v.optional(
    v.object({
      value: v.optional(v.pipe(v.number(), v.integer()), 0),
    }),
  ),
  watchlist: v.optional(v.boolean(), true),
});

export const vTrendingPeopleData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    time_window: v.picklist(['day', 'week']),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTrendingPeopleResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        media_type: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        profile_path: v.optional(v.string()),
        known_for: v.optional(
          v.array(
            v.object({
              adult: v.optional(v.boolean(), true),
              backdrop_path: v.optional(v.string()),
              id: v.optional(v.pipe(v.number(), v.integer()), 0),
              title: v.optional(v.string()),
              original_language: v.optional(v.string()),
              original_title: v.optional(v.string()),
              overview: v.optional(v.string()),
              poster_path: v.optional(v.string()),
              media_type: v.optional(v.string()),
              genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
              popularity: v.optional(v.number(), 0),
              release_date: v.optional(v.string()),
              video: v.optional(v.boolean(), true),
              vote_average: v.optional(v.number(), 0),
              vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
            }),
          ),
        ),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMovieAlternativeTitlesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      country: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vMovieAlternativeTitlesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  titles: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        title: v.optional(v.string()),
        type: v.optional(v.string()),
      }),
    ),
  ),
});

export const vMovieChangesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      end_date: v.optional(v.pipe(v.string(), v.isoDate())),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      start_date: v.optional(v.pipe(v.string(), v.isoDate())),
    }),
  ),
});

/**
 * 200
 */
export const vMovieChangesResponse = v.object({
  changes: v.optional(
    v.array(
      v.object({
        key: v.optional(v.string()),
        items: v.optional(
          v.array(
            v.object({
              id: v.optional(v.string()),
              action: v.optional(v.string()),
              time: v.optional(v.string()),
              iso_639_1: v.optional(v.string()),
              iso_3166_1: v.optional(v.string()),
              value: v.optional(
                v.object({
                  poster: v.optional(
                    v.object({
                      file_path: v.optional(v.string()),
                    }),
                  ),
                }),
              ),
            }),
          ),
        ),
      }),
    ),
  ),
});

export const vMovieCreditsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vMovieCreditsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  cast: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
        cast_id: v.optional(v.pipe(v.number(), v.integer()), 0),
        character: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        order: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  crew: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        department: v.optional(v.string()),
        job: v.optional(v.string()),
      }),
    ),
  ),
});

export const vMovieExternalIdsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vMovieExternalIdsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  imdb_id: v.optional(v.string()),
  wikidata_id: v.optional(v.unknown()),
  facebook_id: v.optional(v.string()),
  instagram_id: v.optional(v.unknown()),
  twitter_id: v.optional(v.unknown()),
});

export const vMovieKeywordsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.string(),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vMovieKeywordsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  keywords: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
      }),
    ),
  ),
});

export const vMovieListsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vMovieListsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        description: v.optional(v.string()),
        favorite_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        item_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.string()),
        list_type: v.optional(v.string()),
        name: v.optional(v.string()),
        poster_path: v.optional(v.unknown()),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMovieRecommendationsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vMovieRecommendationsResponse = v.object({});

export const vMovieReleaseDatesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vMovieReleaseDatesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        release_dates: v.optional(
          v.array(
            v.object({
              certification: v.optional(v.string()),
              descriptors: v.optional(v.array(v.unknown())),
              iso_639_1: v.optional(v.string()),
              note: v.optional(v.string()),
              release_date: v.optional(v.string()),
              type: v.optional(v.pipe(v.number(), v.integer()), 0),
            }),
          ),
        ),
      }),
    ),
  ),
});

export const vMovieReviewsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vMovieReviewsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        author: v.optional(v.string()),
        author_details: v.optional(
          v.object({
            name: v.optional(v.string()),
            username: v.optional(v.string()),
            avatar_path: v.optional(v.string()),
            rating: v.optional(v.unknown()),
          }),
        ),
        content: v.optional(v.string()),
        created_at: v.optional(v.string()),
        id: v.optional(v.string()),
        updated_at: v.optional(v.string()),
        url: v.optional(v.string()),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMovieSimilarData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vMovieSimilarResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMovieTranslationsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vMovieTranslationsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  translations: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        iso_639_1: v.optional(v.string()),
        name: v.optional(v.string()),
        english_name: v.optional(v.string()),
        data: v.optional(
          v.object({
            homepage: v.optional(v.string()),
            overview: v.optional(v.string()),
            runtime: v.optional(v.pipe(v.number(), v.integer()), 0),
            tagline: v.optional(v.string()),
            title: v.optional(v.string()),
          }),
        ),
      }),
    ),
  ),
});

export const vMovieVideosData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vMovieVideosResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        iso_639_1: v.optional(v.string()),
        iso_3166_1: v.optional(v.string()),
        name: v.optional(v.string()),
        key: v.optional(v.string()),
        site: v.optional(v.string()),
        size: v.optional(v.pipe(v.number(), v.integer()), 0),
        type: v.optional(v.string()),
        official: v.optional(v.boolean(), true),
        published_at: v.optional(v.string()),
        id: v.optional(v.string()),
      }),
    ),
  ),
});

export const vMovieWatchProvidersData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vMovieWatchProvidersResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.object({
      AE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      AL: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      AR: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      AT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      AU: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BA: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BB: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BE: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BG: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BH: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BS: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CA: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CH: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CL: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CO: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CV: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      DE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      DK: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      DO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      EC: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      EE: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      EG: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      ES: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          ads: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      FI: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      FJ: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      FR: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GB: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GF: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GI: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HK: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HN: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HR: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          ads: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HU: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      ID: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IE: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IL: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IN: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IQ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IS: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IT: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      JM: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      JO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      JP: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      KR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      KW: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      LB: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      LI: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      LT: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      LV: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MD: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MK: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MU: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MX: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MY: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NL: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NO: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      OM: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PE: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PH: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PK: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PL: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PS: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PT: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PY: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      QA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      RO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      RS: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      RU: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SE: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SG: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SI: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SK: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SM: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SV: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TH: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TR: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TW: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      UG: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      US: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      UY: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      VE: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      YE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      ZA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
    }),
  ),
});

export const vMovieDeleteRatingData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      guest_session_id: v.optional(v.string()),
      session_id: v.optional(v.string()),
    }),
  ),
  headers: v.optional(
    v.object({
      'Content-Type': v.optional(v.string(), 'application/json;charset=utf-8'),
    }),
  ),
});

/**
 * 200
 */
export const vMovieDeleteRatingResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vMovieAddRatingData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.string(),
    }),
  ),
  path: v.object({
    movie_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      guest_session_id: v.optional(v.string()),
      session_id: v.optional(v.string()),
    }),
  ),
  headers: v.object({
    'Content-Type': v.optional(v.string(), 'application/json;charset=utf-8'),
  }),
});

/**
 * 200
 */
export const vMovieAddRatingResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vAuthenticationCreateGuestSessionData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vAuthenticationCreateGuestSessionResponse = v.object({
  success: v.optional(v.boolean(), true),
  guest_session_id: v.optional(v.string()),
  expires_at: v.optional(v.string()),
});

export const vAuthenticationCreateRequestTokenData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vAuthenticationCreateRequestTokenResponse = v.object({
  success: v.optional(v.boolean(), true),
  expires_at: v.optional(v.string()),
  request_token: v.optional(v.string()),
});

export const vAuthenticationCreateSessionData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.string(),
    }),
  ),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vAuthenticationCreateSessionResponse = v.object({
  success: v.optional(v.boolean(), true),
  session_id: v.optional(v.string()),
});

export const vAuthenticationCreateSessionFromV4TokenData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.string(),
    }),
  ),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vAuthenticationCreateSessionFromV4TokenResponse = v.object({
  success: v.optional(v.boolean(), true),
  session_id: v.optional(v.string()),
});

export const vAuthenticationDeleteSessionData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.string(),
    }),
  ),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vAuthenticationDeleteSessionResponse = v.object({
  success: v.optional(v.boolean(), true),
});

export const vFindByIdData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    external_id: v.string(),
  }),
  query: v.object({
    external_source: v.picklist([
      '',
      'imdb_id',
      'facebook_id',
      'instagram_id',
      'tvdb_id',
      'tiktok_id',
      'twitter_id',
      'wikidata_id',
      'youtube_id',
    ]),
    language: v.optional(v.string()),
  }),
});

/**
 * 200
 */
export const vFindByIdResponse = v.object({
  movie_results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        title: v.optional(v.string()),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        poster_path: v.optional(v.string()),
        media_type: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        popularity: v.optional(v.number(), 0),
        release_date: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  person_results: v.optional(v.array(v.unknown())),
  tv_results: v.optional(v.array(v.unknown())),
  tv_episode_results: v.optional(v.array(v.unknown())),
  tv_season_results: v.optional(v.array(v.unknown())),
});

export const vPersonDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    person_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      append_to_response: v.optional(v.string()),
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vPersonDetailsResponse = v.object({
  adult: v.optional(v.boolean(), true),
  also_known_as: v.optional(v.array(v.string())),
  biography: v.optional(v.string()),
  birthday: v.optional(v.string()),
  deathday: v.optional(v.unknown()),
  gender: v.optional(v.pipe(v.number(), v.integer()), 0),
  homepage: v.optional(v.unknown()),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  imdb_id: v.optional(v.string()),
  known_for_department: v.optional(v.string()),
  name: v.optional(v.string()),
  place_of_birth: v.optional(v.string()),
  popularity: v.optional(v.number(), 0),
  profile_path: v.optional(v.string()),
});

export const vPersonChangesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    person_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      end_date: v.optional(v.pipe(v.string(), v.isoDate())),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      start_date: v.optional(v.pipe(v.string(), v.isoDate())),
    }),
  ),
});

/**
 * 200
 */
export const vPersonChangesResponse = v.object({
  changes: v.optional(
    v.array(
      v.object({
        key: v.optional(v.string()),
        items: v.optional(
          v.array(
            v.object({
              id: v.optional(v.string()),
              action: v.optional(v.string()),
              time: v.optional(v.string()),
              iso_639_1: v.optional(v.string()),
              iso_3166_1: v.optional(v.string()),
              value: v.optional(v.string()),
            }),
          ),
        ),
      }),
    ),
  ),
});

export const vTvSeriesChangesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      end_date: v.optional(v.string()),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      start_date: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesChangesResponse = v.object({
  changes: v.optional(
    v.array(
      v.object({
        key: v.optional(v.string()),
        items: v.optional(
          v.array(
            v.object({
              id: v.optional(v.string()),
              action: v.optional(v.string()),
              time: v.optional(v.string()),
              iso_639_1: v.optional(v.string()),
              iso_3166_1: v.optional(v.string()),
              value: v.optional(
                v.object({
                  poster: v.optional(
                    v.object({
                      file_path: v.optional(v.string()),
                      iso_639_1: v.optional(v.string()),
                    }),
                  ),
                }),
              ),
              original_value: v.optional(
                v.object({
                  poster: v.optional(
                    v.object({
                      file_path: v.optional(v.string()),
                      iso_639_1: v.optional(v.string()),
                    }),
                  ),
                }),
              ),
            }),
          ),
        ),
      }),
    ),
  ),
});

export const vPersonImagesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    person_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vPersonImagesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  profiles: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.unknown()),
        file_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vPersonMovieCreditsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    person_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vPersonMovieCreditsResponse = v.object({
  cast: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        character: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        order: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  crew: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        credit_id: v.optional(v.string()),
        department: v.optional(v.string()),
        job: v.optional(v.string()),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vPersonTvCreditsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    person_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vPersonTvCreditsResponse = v.object({
  cast: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        name: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        character: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  crew: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        name: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        credit_id: v.optional(v.string()),
        department: v.optional(v.string()),
        episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        job: v.optional(v.string()),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vPersonCombinedCreditsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    person_id: v.string(),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vPersonCombinedCreditsResponse = v.object({
  cast: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        character: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        order: v.optional(v.pipe(v.number(), v.integer()), 0),
        media_type: v.optional(v.string()),
      }),
    ),
  ),
  crew: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        credit_id: v.optional(v.string()),
        department: v.optional(v.string()),
        job: v.optional(v.string()),
        media_type: v.optional(v.string()),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vPersonExternalIdsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    person_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vPersonExternalIdsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  freebase_mid: v.optional(v.string()),
  freebase_id: v.optional(v.string()),
  imdb_id: v.optional(v.string()),
  tvrage_id: v.optional(v.pipe(v.number(), v.integer()), 0),
  wikidata_id: v.optional(v.string()),
  facebook_id: v.optional(v.string()),
  instagram_id: v.optional(v.string()),
  tiktok_id: v.optional(v.string()),
  twitter_id: v.optional(v.string()),
  youtube_id: v.optional(v.unknown()),
});

export const vPersonTaggedImagesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    person_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vPersonTaggedImagesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        file_path: v.optional(v.string()),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.string()),
        iso_639_1: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
        image_type: v.optional(v.string()),
        media: v.optional(
          v.object({
            adult: v.optional(v.boolean(), true),
            backdrop_path: v.optional(v.string()),
            id: v.optional(v.pipe(v.number(), v.integer()), 0),
            title: v.optional(v.string()),
            original_language: v.optional(v.string()),
            original_title: v.optional(v.string()),
            overview: v.optional(v.string()),
            poster_path: v.optional(v.string()),
            media_type: v.optional(v.string()),
            genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
            popularity: v.optional(v.number(), 0),
            release_date: v.optional(v.string()),
            video: v.optional(v.boolean(), true),
            vote_average: v.optional(v.number(), 0),
            vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
        media_type: v.optional(v.string()),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTranslationsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    person_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTranslationsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  translations: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        iso_639_1: v.optional(v.string()),
        name: v.optional(v.string()),
        english_name: v.optional(v.string()),
        data: v.optional(
          v.object({
            biography: v.optional(v.string()),
            name: v.optional(v.string()),
          }),
        ),
      }),
    ),
  ),
});

export const vPersonPopularListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vPersonPopularListResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for: v.optional(
          v.array(
            v.object({
              adult: v.optional(v.boolean(), true),
              backdrop_path: v.optional(v.string()),
              genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
              id: v.optional(v.pipe(v.number(), v.integer()), 0),
              media_type: v.optional(v.string()),
              original_language: v.optional(v.string()),
              original_title: v.optional(v.string()),
              overview: v.optional(v.string()),
              poster_path: v.optional(v.string()),
              release_date: v.optional(v.string()),
              title: v.optional(v.string()),
              video: v.optional(v.boolean(), true),
              vote_average: v.optional(v.number(), 0),
              vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
            }),
          ),
        ),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMoviePopularListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      region: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vMoviePopularListResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMovieTopRatedListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      region: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vMovieTopRatedListResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMovieUpcomingListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      region: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vMovieUpcomingListResponse = v.object({
  dates: v.optional(
    v.object({
      maximum: v.optional(v.string()),
      minimum: v.optional(v.string()),
    }),
  ),
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.pipe(v.number(), v.integer()), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMovieNowPlayingListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      region: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vMovieNowPlayingListResponse = v.object({
  dates: v.optional(
    v.object({
      maximum: v.optional(v.string()),
      minimum: v.optional(v.string()),
    }),
  ),
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesAiringTodayListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      timezone: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesAiringTodayListResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        backdrop_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        vote_average: v.optional(v.pipe(v.number(), v.integer()), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesOnTheAirListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      timezone: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesOnTheAirListResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        backdrop_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        vote_average: v.optional(v.pipe(v.number(), v.integer()), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesPopularListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesPopularListResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        backdrop_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        vote_average: v.optional(v.pipe(v.number(), v.integer()), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesTopRatedListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesTopRatedListResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        backdrop_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vMovieLatestIdData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vMovieLatestIdResponse = v.object({
  adult: v.optional(v.boolean(), true),
  backdrop_path: v.optional(v.unknown()),
  belongs_to_collection: v.optional(v.unknown()),
  budget: v.optional(v.pipe(v.number(), v.integer()), 0),
  genres: v.optional(v.array(v.unknown())),
  homepage: v.optional(v.string()),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  imdb_id: v.optional(v.unknown()),
  original_language: v.optional(v.string()),
  original_title: v.optional(v.string()),
  overview: v.optional(v.string()),
  popularity: v.optional(v.pipe(v.number(), v.integer()), 0),
  poster_path: v.optional(v.unknown()),
  production_companies: v.optional(v.array(v.unknown())),
  production_countries: v.optional(v.array(v.unknown())),
  release_date: v.optional(v.string()),
  revenue: v.optional(v.pipe(v.number(), v.integer()), 0),
  runtime: v.optional(v.pipe(v.number(), v.integer()), 0),
  spoken_languages: v.optional(v.array(v.unknown())),
  status: v.optional(v.string()),
  tagline: v.optional(v.string()),
  title: v.optional(v.string()),
  video: v.optional(v.boolean(), true),
  vote_average: v.optional(v.pipe(v.number(), v.integer()), 0),
  vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesLatestIdData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvSeriesLatestIdResponse = v.object({
  adult: v.optional(v.boolean(), true),
  backdrop_path: v.optional(v.unknown()),
  created_by: v.optional(v.array(v.unknown())),
  episode_run_time: v.optional(v.array(v.unknown())),
  first_air_date: v.optional(v.string()),
  genres: v.optional(v.array(v.unknown())),
  homepage: v.optional(v.string()),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  in_production: v.optional(v.boolean(), true),
  languages: v.optional(v.array(v.unknown())),
  last_air_date: v.optional(v.string()),
  last_episode_to_air: v.optional(
    v.object({
      id: v.optional(v.pipe(v.number(), v.integer()), 0),
      name: v.optional(v.string()),
      overview: v.optional(v.string()),
      vote_average: v.optional(v.pipe(v.number(), v.integer()), 0),
      vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      air_date: v.optional(v.string()),
      episode_number: v.optional(v.pipe(v.number(), v.integer()), 0),
      production_code: v.optional(v.string()),
      runtime: v.optional(v.unknown()),
      season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
      show_id: v.optional(v.pipe(v.number(), v.integer()), 0),
      still_path: v.optional(v.unknown()),
    }),
  ),
  name: v.optional(v.string()),
  next_episode_to_air: v.optional(v.unknown()),
  networks: v.optional(v.array(v.unknown())),
  number_of_episodes: v.optional(v.pipe(v.number(), v.integer()), 0),
  number_of_seasons: v.optional(v.pipe(v.number(), v.integer()), 0),
  origin_country: v.optional(v.array(v.string())),
  original_language: v.optional(v.string()),
  original_name: v.optional(v.string()),
  overview: v.optional(v.string()),
  popularity: v.optional(v.pipe(v.number(), v.integer()), 0),
  poster_path: v.optional(v.unknown()),
  production_companies: v.optional(v.array(v.unknown())),
  production_countries: v.optional(v.array(v.unknown())),
  seasons: v.optional(
    v.array(
      v.object({
        air_date: v.optional(v.unknown()),
        episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        overview: v.optional(v.string()),
        poster_path: v.optional(v.unknown()),
        season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  spoken_languages: v.optional(v.array(v.unknown())),
  status: v.optional(v.string()),
  tagline: v.optional(v.string()),
  type: v.optional(v.string()),
  vote_average: v.optional(v.pipe(v.number(), v.integer()), 0),
  vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesAggregateCreditsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesAggregateCreditsResponse = v.object({
  cast: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
        roles: v.optional(
          v.array(
            v.object({
              credit_id: v.optional(v.string()),
              character: v.optional(v.string()),
              episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
            }),
          ),
        ),
        total_episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        order: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  crew: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
        jobs: v.optional(
          v.array(
            v.object({
              credit_id: v.optional(v.string()),
              job: v.optional(v.string()),
              episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
            }),
          ),
        ),
        department: v.optional(v.string()),
        total_episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesAlternativeTitlesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvSeriesAlternativeTitlesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        title: v.optional(v.string()),
        type: v.optional(v.string()),
      }),
    ),
  ),
});

export const vTvSeriesContentRatingsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvSeriesContentRatingsResponse = v.object({
  results: v.optional(
    v.array(
      v.object({
        descriptors: v.optional(v.array(v.unknown())),
        iso_3166_1: v.optional(v.string()),
        rating: v.optional(v.string()),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesCreditsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesCreditsResponse = v.object({
  cast: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
        character: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        order: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  crew: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        department: v.optional(v.string()),
        job: v.optional(v.string()),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesEpisodeGroupsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvSeriesEpisodeGroupsResponse = v.object({
  results: v.optional(
    v.array(
      v.object({
        description: v.optional(v.string()),
        episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        group_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.string()),
        name: v.optional(v.string()),
        network: v.optional(
          v.object({
            id: v.optional(v.pipe(v.number(), v.integer()), 0),
            logo_path: v.optional(v.string()),
            name: v.optional(v.string()),
            origin_country: v.optional(v.string()),
          }),
        ),
        type: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesExternalIdsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvSeriesExternalIdsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  imdb_id: v.optional(v.string()),
  freebase_mid: v.optional(v.string()),
  freebase_id: v.optional(v.string()),
  tvdb_id: v.optional(v.pipe(v.number(), v.integer()), 0),
  tvrage_id: v.optional(v.pipe(v.number(), v.integer()), 0),
  wikidata_id: v.optional(v.string()),
  facebook_id: v.optional(v.string()),
  instagram_id: v.optional(v.string()),
  twitter_id: v.optional(v.string()),
});

export const vTvSeriesKeywordsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvSeriesKeywordsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        name: v.optional(v.string()),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vTvSeriesRecommendationsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesRecommendationsResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        poster_path: v.optional(v.string()),
        media_type: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        popularity: v.optional(v.number(), 0),
        first_air_date: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        origin_country: v.optional(v.array(v.string())),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesReviewsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesReviewsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        author: v.optional(v.string()),
        author_details: v.optional(
          v.object({
            name: v.optional(v.string()),
            username: v.optional(v.string()),
            avatar_path: v.optional(v.string()),
            rating: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
        content: v.optional(v.string()),
        created_at: v.optional(v.string()),
        id: v.optional(v.string()),
        updated_at: v.optional(v.string()),
        url: v.optional(v.string()),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesScreenedTheatricallyData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvSeriesScreenedTheatricallyResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        episode_number: v.optional(v.pipe(v.number(), v.integer()), 0),
        season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vTvSeriesSimilarData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.string(),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesSimilarResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        name: v.optional(v.string()),
        vote_average: v.optional(v.pipe(v.number(), v.integer()), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeriesTranslationsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvSeriesTranslationsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  translations: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        iso_639_1: v.optional(v.string()),
        name: v.optional(v.string()),
        english_name: v.optional(v.string()),
        data: v.optional(
          v.object({
            name: v.optional(v.string()),
            overview: v.optional(v.string()),
            homepage: v.optional(v.string()),
            tagline: v.optional(v.string()),
          }),
        ),
      }),
    ),
  ),
});

export const vTvSeriesVideosData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      include_video_language: v.optional(v.string()),
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesVideosResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        iso_639_1: v.optional(v.string()),
        iso_3166_1: v.optional(v.string()),
        name: v.optional(v.string()),
        key: v.optional(v.string()),
        site: v.optional(v.string()),
        size: v.optional(v.pipe(v.number(), v.integer()), 0),
        type: v.optional(v.string()),
        official: v.optional(v.boolean(), true),
        published_at: v.optional(v.string()),
        id: v.optional(v.string()),
      }),
    ),
  ),
});

export const vTvSeriesWatchProvidersData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvSeriesWatchProvidersResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.object({
      AE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      AR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      AT: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      AU: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BB: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BG: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BS: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CA: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CH: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CI: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CL: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      DE: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      DK: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      DO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      DZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      EC: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      EG: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      ES: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      FI: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      FR: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GB: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GF: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GH: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GQ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HK: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HN: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HU: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      ID: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IL: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IQ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IT: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      JM: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      JP: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      KE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      KR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      LB: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      LT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      LY: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MD: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MK: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MU: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MX: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MY: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NG: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NL: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PH: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PL: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PS: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PY: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      RO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      RS: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      RU: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          ads: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SC: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SG: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SI: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SK: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SN: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SV: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TH: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TW: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      UG: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      US: v.optional(
        v.object({
          link: v.optional(v.string()),
          free: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      UY: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      VE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      ZA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      ZM: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
    }),
  ),
});

export const vTvSeriesDeleteRatingData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      guest_session_id: v.optional(v.string()),
      session_id: v.optional(v.string()),
    }),
  ),
  headers: v.optional(
    v.object({
      'Content-Type': v.optional(v.string(), 'application/json;charset=utf-8'),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeriesDeleteRatingResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vTvSeriesAddRatingData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.string(),
    }),
  ),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      guest_session_id: v.optional(v.string()),
      session_id: v.optional(v.string()),
    }),
  ),
  headers: v.object({
    'Content-Type': v.optional(v.string(), 'application/json;charset=utf-8'),
  }),
});

/**
 * 200
 */
export const vTvSeriesAddRatingResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vTvSeasonAccountStatesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      session_id: v.optional(v.string()),
      guest_session_id: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeasonAccountStatesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        episode_number: v.optional(v.pipe(v.number(), v.integer()), 0),
        rated: v.optional(
          v.object({
            value: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      }),
    ),
  ),
});

export const vTvSeasonAggregateCreditsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeasonAggregateCreditsResponse = v.object({
  cast: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
        roles: v.optional(
          v.array(
            v.object({
              credit_id: v.optional(v.string()),
              character: v.optional(v.string()),
              episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
            }),
          ),
        ),
        total_episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        order: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  crew: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.unknown()),
        jobs: v.optional(
          v.array(
            v.object({
              credit_id: v.optional(v.string()),
              job: v.optional(v.string()),
              episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
            }),
          ),
        ),
        department: v.optional(v.string()),
        total_episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeasonChangesByIdData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    season_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      end_date: v.optional(v.string()),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      start_date: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeasonChangesByIdResponse = v.object({
  changes: v.optional(
    v.array(
      v.object({
        key: v.optional(v.string()),
        items: v.optional(
          v.array(
            v.object({
              id: v.optional(v.string()),
              action: v.optional(v.string()),
              time: v.optional(v.string()),
              value: v.optional(
                v.object({
                  episode_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                  episode_number: v.optional(v.pipe(v.number(), v.integer()), 0),
                }),
              ),
            }),
          ),
        ),
      }),
    ),
  ),
});

export const vTvSeasonCreditsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeasonCreditsResponse = v.object({
  cast: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
        character: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        order: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  crew: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.unknown()),
        credit_id: v.optional(v.string()),
        department: v.optional(v.string()),
        job: v.optional(v.string()),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvSeasonExternalIdsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvSeasonExternalIdsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  freebase_mid: v.optional(v.string()),
  freebase_id: v.optional(v.string()),
  tvdb_id: v.optional(v.pipe(v.number(), v.integer()), 0),
  tvrage_id: v.optional(v.unknown()),
  wikidata_id: v.optional(v.string()),
});

export const vTvSeasonTranslationsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvSeasonTranslationsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  translations: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        iso_639_1: v.optional(v.string()),
        name: v.optional(v.string()),
        english_name: v.optional(v.string()),
        data: v.optional(
          v.object({
            name: v.optional(v.string()),
            overview: v.optional(v.string()),
          }),
        ),
      }),
    ),
  ),
});

export const vTvSeasonVideosData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      include_video_language: v.optional(v.string()),
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeasonVideosResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        iso_639_1: v.optional(v.string()),
        iso_3166_1: v.optional(v.string()),
        name: v.optional(v.string()),
        key: v.optional(v.string()),
        site: v.optional(v.string()),
        size: v.optional(v.pipe(v.number(), v.integer()), 0),
        type: v.optional(v.string()),
        official: v.optional(v.boolean(), true),
        published_at: v.optional(v.string()),
        id: v.optional(v.string()),
      }),
    ),
  ),
});

export const vTvEpisodeCreditsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
    episode_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvEpisodeCreditsResponse = v.object({
  cast: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
        character: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        order: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  crew: v.optional(
    v.array(
      v.object({
        department: v.optional(v.string()),
        job: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
      }),
    ),
  ),
  guest_stars: v.optional(
    v.array(
      v.object({
        character: v.optional(v.string()),
        credit_id: v.optional(v.string()),
        order: v.optional(v.pipe(v.number(), v.integer()), 0),
        adult: v.optional(v.boolean(), true),
        gender: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        known_for_department: v.optional(v.string()),
        name: v.optional(v.string()),
        original_name: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        profile_path: v.optional(v.string()),
      }),
    ),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vTvEpisodeExternalIdsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
    episode_number: v.string(),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvEpisodeExternalIdsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  imdb_id: v.optional(v.string()),
  freebase_mid: v.optional(v.string()),
  freebase_id: v.optional(v.string()),
  tvdb_id: v.optional(v.pipe(v.number(), v.integer()), 0),
  tvrage_id: v.optional(v.pipe(v.number(), v.integer()), 0),
  wikidata_id: v.optional(v.string()),
});

export const vTvEpisodeTranslationsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
    episode_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvEpisodeTranslationsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  translations: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        iso_639_1: v.optional(v.string()),
        name: v.optional(v.string()),
        english_name: v.optional(v.string()),
        data: v.optional(
          v.object({
            name: v.optional(v.string()),
            overview: v.optional(v.string()),
          }),
        ),
      }),
    ),
  ),
});

export const vTvEpisodeVideosData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
    episode_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      include_video_language: v.optional(v.string()),
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvEpisodeVideosResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        iso_639_1: v.optional(v.string()),
        iso_3166_1: v.optional(v.string()),
        name: v.optional(v.string()),
        key: v.optional(v.string()),
        site: v.optional(v.string()),
        size: v.optional(v.pipe(v.number(), v.integer()), 0),
        type: v.optional(v.string()),
        official: v.optional(v.boolean(), true),
        published_at: v.optional(v.string()),
        id: v.optional(v.string()),
      }),
    ),
  ),
});

export const vTvEpisodeDeleteRatingData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
    episode_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      guest_session_id: v.optional(v.string()),
      session_id: v.optional(v.string()),
    }),
  ),
  headers: v.optional(
    v.object({
      'Content-Type': v.optional(v.string(), 'application/json;charset=utf-8'),
    }),
  ),
});

/**
 * 200
 */
export const vTvEpisodeDeleteRatingResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vTvEpisodeAddRatingData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.string(),
    }),
  ),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
    episode_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      guest_session_id: v.optional(v.string()),
      session_id: v.optional(v.string()),
    }),
  ),
  headers: v.object({
    'Content-Type': v.optional(v.string(), 'application/json;charset=utf-8'),
  }),
});

/**
 * 200
 */
export const vTvEpisodeAddRatingResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vAccountDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    account_id: v.optional(v.pipe(v.number(), v.integer()), null),
  }),
  query: v.optional(
    v.object({
      session_id: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vAccountDetailsResponse = v.object({
  avatar: v.optional(
    v.object({
      gravatar: v.optional(
        v.object({
          hash: v.optional(v.string()),
        }),
      ),
      tmdb: v.optional(
        v.object({
          avatar_path: v.optional(v.string()),
        }),
      ),
    }),
  ),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  iso_639_1: v.optional(v.string()),
  iso_3166_1: v.optional(v.string()),
  name: v.optional(v.string()),
  include_adult: v.optional(v.boolean(), true),
  username: v.optional(v.string()),
});

export const vAccountListsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    account_id: v.optional(v.pipe(v.number(), v.integer()), null),
  }),
  query: v.optional(
    v.object({
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      session_id: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vAccountListsResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        description: v.optional(v.string()),
        favorite_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        item_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.string()),
        list_type: v.optional(v.string()),
        name: v.optional(v.string()),
        poster_path: v.optional(v.unknown()),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vAccountGetFavoritesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    account_id: v.optional(v.pipe(v.number(), v.integer()), null),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      session_id: v.optional(v.string()),
      sort_by: v.optional(v.picklist(['created_at.asc', 'created_at.desc'])),
    }),
  ),
});

/**
 * 200
 */
export const vAccountGetFavoritesResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vAccountFavoriteTvData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    account_id: v.optional(v.pipe(v.number(), v.integer()), null),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      session_id: v.optional(v.string()),
      sort_by: v.optional(v.picklist(['created_at.asc', 'created_at.desc'])),
    }),
  ),
});

/**
 * 200
 */
export const vAccountFavoriteTvResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        name: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vAccountRatedMoviesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    account_id: v.optional(v.pipe(v.number(), v.integer()), null),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      session_id: v.optional(v.string()),
      sort_by: v.optional(v.picklist(['created_at.asc', 'created_at.desc'])),
    }),
  ),
});

/**
 * 200
 */
export const vAccountRatedMoviesResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        rating: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vAccountRatedTvData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    account_id: v.optional(v.pipe(v.number(), v.integer()), null),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      session_id: v.optional(v.string()),
      sort_by: v.optional(v.picklist(['created_at.asc', 'created_at.desc'])),
    }),
  ),
});

/**
 * 200
 */
export const vAccountRatedTvResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        name: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        rating: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vAccountRatedTvEpisodesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    account_id: v.optional(v.pipe(v.number(), v.integer()), null),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      session_id: v.optional(v.string()),
      sort_by: v.optional(v.picklist(['created_at.asc', 'created_at.desc'])),
    }),
  ),
});

/**
 * 200
 */
export const vAccountRatedTvEpisodesResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        air_date: v.optional(v.string()),
        episode_number: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        overview: v.optional(v.string()),
        production_code: v.optional(v.string()),
        runtime: v.optional(v.pipe(v.number(), v.integer()), 0),
        season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
        show_id: v.optional(v.pipe(v.number(), v.integer()), 0),
        still_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        rating: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vAccountWatchlistMoviesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    account_id: v.optional(v.pipe(v.number(), v.integer()), null),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      session_id: v.optional(v.string()),
      sort_by: v.optional(v.picklist(['created_at.asc', 'created_at.desc'])),
    }),
  ),
});

/**
 * 200
 */
export const vAccountWatchlistMoviesResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vAccountWatchlistTvData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    account_id: v.optional(v.pipe(v.number(), v.integer()), null),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      session_id: v.optional(v.string()),
      sort_by: v.optional(v.picklist(['created_at.asc', 'created_at.desc'])),
    }),
  ),
});

/**
 * 200
 */
export const vAccountWatchlistTvResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        name: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vAccountAddFavoriteData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.string(),
    }),
  ),
  path: v.object({
    account_id: v.optional(v.pipe(v.number(), v.integer()), null),
  }),
  query: v.optional(
    v.object({
      session_id: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vAccountAddFavoriteResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vAccountAddToWatchlistData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.string(),
    }),
  ),
  path: v.object({
    account_id: v.optional(v.pipe(v.number(), v.integer()), null),
  }),
  query: v.optional(
    v.object({
      session_id: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vAccountAddToWatchlistResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vCertificationMovieListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vCertificationMovieListResponse = v.object({
  certifications: v.optional(
    v.object({
      AU: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      BG: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      BR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      CA: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      'CA-QC': v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      DE: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      DK: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      ES: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      FI: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      FR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      GB: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      HU: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      IN: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      IT: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      LT: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      MY: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      NL: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      NO: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      NZ: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      PH: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      PT: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      RU: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      SE: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      US: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      KR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      SK: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      TH: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      MX: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      ID: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      TR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      AR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      GR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      TW: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      ZA: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      SG: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      IE: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      PR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      JP: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      VI: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      CH: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      IL: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      HK: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      MO: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      LV: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      LU: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
    }),
  ),
});

export const vCertificationsTvListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vCertificationsTvListResponse = v.object({
  certifications: v.optional(
    v.object({
      AU: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      BR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      CA: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      'CA-QC': v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      DE: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      ES: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      FR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      GB: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      HU: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      KR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      LT: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      NL: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      PH: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      PT: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      RU: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      SK: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      TH: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      US: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      IT: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      FI: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      MY: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      NZ: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      NO: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      BG: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      MX: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      IN: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      DK: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      SE: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      ID: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      TR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      AR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      PL: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      MA: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      GR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      IL: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      TW: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      ZA: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      SG: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      PR: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
      VI: v.optional(
        v.array(
          v.object({
            certification: v.optional(v.string()),
            meaning: v.optional(v.string()),
            order: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
    }),
  ),
});

export const vChangesMovieListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      end_date: v.optional(v.pipe(v.string(), v.isoDate())),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      start_date: v.optional(v.pipe(v.string(), v.isoDate())),
    }),
  ),
});

/**
 * 200
 */
export const vChangesMovieListResponse = v.object({
  results: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        adult: v.optional(v.boolean(), true),
      }),
    ),
  ),
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vChangesTvListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      end_date: v.optional(v.pipe(v.string(), v.isoDate())),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      start_date: v.optional(v.pipe(v.string(), v.isoDate())),
    }),
  ),
});

/**
 * 200
 */
export const vChangesTvListResponse = v.object({
  results: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        adult: v.optional(v.boolean(), true),
      }),
    ),
  ),
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vChangesPeopleListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      end_date: v.optional(v.pipe(v.string(), v.isoDate())),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      start_date: v.optional(v.pipe(v.string(), v.isoDate())),
    }),
  ),
});

/**
 * 200
 */
export const vChangesPeopleListResponse = v.object({
  results: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        adult: v.optional(v.boolean(), true),
      }),
    ),
  ),
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vCollectionDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    collection_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vCollectionDetailsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  name: v.optional(v.string()),
  overview: v.optional(v.string()),
  poster_path: v.optional(v.string()),
  backdrop_path: v.optional(v.string()),
  parts: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        title: v.optional(v.string()),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        poster_path: v.optional(v.string()),
        media_type: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        popularity: v.optional(v.number(), 0),
        release_date: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vCollectionImagesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    collection_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      include_image_language: v.optional(v.string()),
      language: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vCollectionImagesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  backdrops: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.unknown()),
        file_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  posters: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.string()),
        file_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vCollectionTranslationsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    collection_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vCollectionTranslationsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  translations: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        iso_639_1: v.optional(v.string()),
        name: v.optional(v.string()),
        english_name: v.optional(v.string()),
        data: v.optional(
          v.object({
            title: v.optional(v.string()),
            overview: v.optional(v.string()),
            homepage: v.optional(v.string()),
          }),
        ),
      }),
    ),
  ),
});

export const vCompanyDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    company_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vCompanyDetailsResponse = v.object({
  description: v.optional(v.string()),
  headquarters: v.optional(v.string()),
  homepage: v.optional(v.string()),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  logo_path: v.optional(v.string()),
  name: v.optional(v.string()),
  origin_country: v.optional(v.string()),
  parent_company: v.optional(v.unknown()),
});

export const vCompanyAlternativeNamesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    company_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vCompanyAlternativeNamesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        name: v.optional(v.string()),
        type: v.optional(v.string()),
      }),
    ),
  ),
});

export const vCompanyImagesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    company_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vCompanyImagesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  logos: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        file_path: v.optional(v.string()),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.string()),
        file_type: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vCreditDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    credit_id: v.string(),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vCreditDetailsResponse = v.object({
  credit_type: v.optional(v.string()),
  department: v.optional(v.string()),
  job: v.optional(v.string()),
  media: v.optional(
    v.object({
      adult: v.optional(v.boolean(), true),
      backdrop_path: v.optional(v.string()),
      id: v.optional(v.pipe(v.number(), v.integer()), 0),
      name: v.optional(v.string()),
      original_language: v.optional(v.string()),
      original_name: v.optional(v.string()),
      overview: v.optional(v.string()),
      poster_path: v.optional(v.string()),
      media_type: v.optional(v.string()),
      genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
      popularity: v.optional(v.number(), 0),
      first_air_date: v.optional(v.string()),
      vote_average: v.optional(v.number(), 0),
      vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      origin_country: v.optional(v.array(v.string())),
      character: v.optional(v.string()),
      episodes: v.optional(v.array(v.unknown())),
      seasons: v.optional(
        v.array(
          v.object({
            air_date: v.optional(v.string()),
            episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
            id: v.optional(v.pipe(v.number(), v.integer()), 0),
            name: v.optional(v.string()),
            overview: v.optional(v.string()),
            poster_path: v.optional(v.string()),
            season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
            show_id: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
      ),
    }),
  ),
  media_type: v.optional(v.string()),
  id: v.optional(v.string()),
  person: v.optional(
    v.object({
      adult: v.optional(v.boolean(), true),
      id: v.optional(v.pipe(v.number(), v.integer()), 0),
      name: v.optional(v.string()),
      original_name: v.optional(v.string()),
      media_type: v.optional(v.string()),
      popularity: v.optional(v.number(), 0),
      gender: v.optional(v.pipe(v.number(), v.integer()), 0),
      known_for_department: v.optional(v.string()),
      profile_path: v.optional(v.string()),
    }),
  ),
});

export const vGenreMovieListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en'),
    }),
  ),
});

/**
 * 200
 */
export const vGenreMovieListResponse = v.object({
  genres: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
      }),
    ),
  ),
});

export const vGenreTvListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en'),
    }),
  ),
});

/**
 * 200
 */
export const vGenreTvListResponse = v.object({
  genres: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
      }),
    ),
  ),
});

export const vGuestSessionRatedMoviesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    guest_session_id: v.string(),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      sort_by: v.optional(v.picklist(['created_at.asc', 'created_at.desc'])),
    }),
  ),
});

/**
 * 200
 */
export const vGuestSessionRatedMoviesResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        rating: v.optional(v.number(), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vGuestSessionRatedTvData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    guest_session_id: v.string(),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      sort_by: v.optional(v.picklist(['created_at.asc', 'created_at.desc'])),
    }),
  ),
});

/**
 * 200
 */
export const vGuestSessionRatedTvResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        origin_country: v.optional(v.array(v.string())),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        first_air_date: v.optional(v.string()),
        name: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        rating: v.optional(v.number(), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vGuestSessionRatedTvEpisodesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    guest_session_id: v.string(),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
      sort_by: v.optional(v.picklist(['created_at.asc', 'created_at.desc'])),
    }),
  ),
});

/**
 * 200
 */
export const vGuestSessionRatedTvEpisodesResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        air_date: v.optional(v.string()),
        episode_number: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        overview: v.optional(v.string()),
        production_code: v.optional(v.string()),
        runtime: v.optional(v.pipe(v.number(), v.integer()), 0),
        season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
        show_id: v.optional(v.pipe(v.number(), v.integer()), 0),
        still_path: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        rating: v.optional(v.number(), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vWatchProvidersAvailableRegionsData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vWatchProvidersAvailableRegionsResponse = v.object({
  results: v.optional(
    v.array(
      v.object({
        iso_3166_1: v.optional(v.string()),
        english_name: v.optional(v.string()),
        native_name: v.optional(v.string()),
      }),
    ),
  ),
});

export const vWatchProvidersMovieListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      watch_region: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vWatchProvidersMovieListResponse = v.object({
  results: v.optional(
    v.array(
      v.object({
        display_priorities: v.optional(
          v.object({
            CA: v.optional(v.pipe(v.number(), v.integer()), 0),
            AE: v.optional(v.pipe(v.number(), v.integer()), 0),
            AR: v.optional(v.pipe(v.number(), v.integer()), 0),
            AT: v.optional(v.pipe(v.number(), v.integer()), 0),
            AU: v.optional(v.pipe(v.number(), v.integer()), 0),
            BE: v.optional(v.pipe(v.number(), v.integer()), 0),
            BO: v.optional(v.pipe(v.number(), v.integer()), 0),
            BR: v.optional(v.pipe(v.number(), v.integer()), 0),
            BG: v.optional(v.pipe(v.number(), v.integer()), 0),
            CH: v.optional(v.pipe(v.number(), v.integer()), 0),
            CL: v.optional(v.pipe(v.number(), v.integer()), 0),
            CO: v.optional(v.pipe(v.number(), v.integer()), 0),
            CR: v.optional(v.pipe(v.number(), v.integer()), 0),
            CZ: v.optional(v.pipe(v.number(), v.integer()), 0),
            DE: v.optional(v.pipe(v.number(), v.integer()), 0),
            DK: v.optional(v.pipe(v.number(), v.integer()), 0),
            EC: v.optional(v.pipe(v.number(), v.integer()), 0),
            EE: v.optional(v.pipe(v.number(), v.integer()), 0),
            EG: v.optional(v.pipe(v.number(), v.integer()), 0),
            ES: v.optional(v.pipe(v.number(), v.integer()), 0),
            FI: v.optional(v.pipe(v.number(), v.integer()), 0),
            FR: v.optional(v.pipe(v.number(), v.integer()), 0),
            GB: v.optional(v.pipe(v.number(), v.integer()), 0),
            GR: v.optional(v.pipe(v.number(), v.integer()), 0),
            GT: v.optional(v.pipe(v.number(), v.integer()), 0),
            HK: v.optional(v.pipe(v.number(), v.integer()), 0),
            HN: v.optional(v.pipe(v.number(), v.integer()), 0),
            HU: v.optional(v.pipe(v.number(), v.integer()), 0),
            ID: v.optional(v.pipe(v.number(), v.integer()), 0),
            IE: v.optional(v.pipe(v.number(), v.integer()), 0),
            IN: v.optional(v.pipe(v.number(), v.integer()), 0),
            IT: v.optional(v.pipe(v.number(), v.integer()), 0),
            JP: v.optional(v.pipe(v.number(), v.integer()), 0),
            LT: v.optional(v.pipe(v.number(), v.integer()), 0),
            LV: v.optional(v.pipe(v.number(), v.integer()), 0),
            MX: v.optional(v.pipe(v.number(), v.integer()), 0),
            MY: v.optional(v.pipe(v.number(), v.integer()), 0),
            NL: v.optional(v.pipe(v.number(), v.integer()), 0),
            NO: v.optional(v.pipe(v.number(), v.integer()), 0),
            NZ: v.optional(v.pipe(v.number(), v.integer()), 0),
            PE: v.optional(v.pipe(v.number(), v.integer()), 0),
            PH: v.optional(v.pipe(v.number(), v.integer()), 0),
            PL: v.optional(v.pipe(v.number(), v.integer()), 0),
            PT: v.optional(v.pipe(v.number(), v.integer()), 0),
            PY: v.optional(v.pipe(v.number(), v.integer()), 0),
            RU: v.optional(v.pipe(v.number(), v.integer()), 0),
            SA: v.optional(v.pipe(v.number(), v.integer()), 0),
            SE: v.optional(v.pipe(v.number(), v.integer()), 0),
            SG: v.optional(v.pipe(v.number(), v.integer()), 0),
            SK: v.optional(v.pipe(v.number(), v.integer()), 0),
            TH: v.optional(v.pipe(v.number(), v.integer()), 0),
            TR: v.optional(v.pipe(v.number(), v.integer()), 0),
            TW: v.optional(v.pipe(v.number(), v.integer()), 0),
            US: v.optional(v.pipe(v.number(), v.integer()), 0),
            VE: v.optional(v.pipe(v.number(), v.integer()), 0),
            ZA: v.optional(v.pipe(v.number(), v.integer()), 0),
            SI: v.optional(v.pipe(v.number(), v.integer()), 0),
            CV: v.optional(v.pipe(v.number(), v.integer()), 0),
            GH: v.optional(v.pipe(v.number(), v.integer()), 0),
            MU: v.optional(v.pipe(v.number(), v.integer()), 0),
            MZ: v.optional(v.pipe(v.number(), v.integer()), 0),
            UG: v.optional(v.pipe(v.number(), v.integer()), 0),
            IL: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
        display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
        logo_path: v.optional(v.string()),
        provider_name: v.optional(v.string()),
        provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vWatchProviderTvListData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      watch_region: v.optional(v.string()),
    }),
  ),
});

/**
 * 200
 */
export const vWatchProviderTvListResponse = v.object({
  results: v.optional(
    v.array(
      v.object({
        display_priorities: v.optional(
          v.object({
            CA: v.optional(v.pipe(v.number(), v.integer()), 0),
            AE: v.optional(v.pipe(v.number(), v.integer()), 0),
            AR: v.optional(v.pipe(v.number(), v.integer()), 0),
            AT: v.optional(v.pipe(v.number(), v.integer()), 0),
            AU: v.optional(v.pipe(v.number(), v.integer()), 0),
            BE: v.optional(v.pipe(v.number(), v.integer()), 0),
            BO: v.optional(v.pipe(v.number(), v.integer()), 0),
            BR: v.optional(v.pipe(v.number(), v.integer()), 0),
            BG: v.optional(v.pipe(v.number(), v.integer()), 0),
            CH: v.optional(v.pipe(v.number(), v.integer()), 0),
            CL: v.optional(v.pipe(v.number(), v.integer()), 0),
            CO: v.optional(v.pipe(v.number(), v.integer()), 0),
            CR: v.optional(v.pipe(v.number(), v.integer()), 0),
            CZ: v.optional(v.pipe(v.number(), v.integer()), 0),
            DE: v.optional(v.pipe(v.number(), v.integer()), 0),
            DK: v.optional(v.pipe(v.number(), v.integer()), 0),
            EC: v.optional(v.pipe(v.number(), v.integer()), 0),
            EE: v.optional(v.pipe(v.number(), v.integer()), 0),
            EG: v.optional(v.pipe(v.number(), v.integer()), 0),
            ES: v.optional(v.pipe(v.number(), v.integer()), 0),
            FI: v.optional(v.pipe(v.number(), v.integer()), 0),
            FR: v.optional(v.pipe(v.number(), v.integer()), 0),
            GB: v.optional(v.pipe(v.number(), v.integer()), 0),
            GR: v.optional(v.pipe(v.number(), v.integer()), 0),
            GT: v.optional(v.pipe(v.number(), v.integer()), 0),
            HK: v.optional(v.pipe(v.number(), v.integer()), 0),
            HN: v.optional(v.pipe(v.number(), v.integer()), 0),
            HU: v.optional(v.pipe(v.number(), v.integer()), 0),
            ID: v.optional(v.pipe(v.number(), v.integer()), 0),
            IE: v.optional(v.pipe(v.number(), v.integer()), 0),
            IN: v.optional(v.pipe(v.number(), v.integer()), 0),
            IT: v.optional(v.pipe(v.number(), v.integer()), 0),
            JP: v.optional(v.pipe(v.number(), v.integer()), 0),
            LT: v.optional(v.pipe(v.number(), v.integer()), 0),
            LV: v.optional(v.pipe(v.number(), v.integer()), 0),
            MX: v.optional(v.pipe(v.number(), v.integer()), 0),
            MY: v.optional(v.pipe(v.number(), v.integer()), 0),
            NL: v.optional(v.pipe(v.number(), v.integer()), 0),
            NO: v.optional(v.pipe(v.number(), v.integer()), 0),
            NZ: v.optional(v.pipe(v.number(), v.integer()), 0),
            PE: v.optional(v.pipe(v.number(), v.integer()), 0),
            PH: v.optional(v.pipe(v.number(), v.integer()), 0),
            PL: v.optional(v.pipe(v.number(), v.integer()), 0),
            PT: v.optional(v.pipe(v.number(), v.integer()), 0),
            PY: v.optional(v.pipe(v.number(), v.integer()), 0),
            RU: v.optional(v.pipe(v.number(), v.integer()), 0),
            SA: v.optional(v.pipe(v.number(), v.integer()), 0),
            SE: v.optional(v.pipe(v.number(), v.integer()), 0),
            SG: v.optional(v.pipe(v.number(), v.integer()), 0),
            SK: v.optional(v.pipe(v.number(), v.integer()), 0),
            TH: v.optional(v.pipe(v.number(), v.integer()), 0),
            TR: v.optional(v.pipe(v.number(), v.integer()), 0),
            TW: v.optional(v.pipe(v.number(), v.integer()), 0),
            US: v.optional(v.pipe(v.number(), v.integer()), 0),
            VE: v.optional(v.pipe(v.number(), v.integer()), 0),
            ZA: v.optional(v.pipe(v.number(), v.integer()), 0),
            SI: v.optional(v.pipe(v.number(), v.integer()), 0),
            CV: v.optional(v.pipe(v.number(), v.integer()), 0),
            GH: v.optional(v.pipe(v.number(), v.integer()), 0),
            MU: v.optional(v.pipe(v.number(), v.integer()), 0),
            MZ: v.optional(v.pipe(v.number(), v.integer()), 0),
            UG: v.optional(v.pipe(v.number(), v.integer()), 0),
            IL: v.optional(v.pipe(v.number(), v.integer()), 0),
          }),
        ),
        display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
        logo_path: v.optional(v.string()),
        provider_name: v.optional(v.string()),
        provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vKeywordDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    keyword_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vKeywordDetailsResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  name: v.optional(v.string()),
});

export const vKeywordMoviesData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    keyword_id: v.string(),
  }),
  query: v.optional(
    v.object({
      include_adult: v.optional(v.boolean(), false),
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vKeywordMoviesResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vListDeleteData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    list_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.object({
    session_id: v.string(),
  }),
});

/**
 * 200
 */
export const vListDeleteResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vListDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    list_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vListDetailsResponse = v.object({
  created_by: v.optional(v.string()),
  description: v.optional(v.string()),
  favorite_count: v.optional(v.pipe(v.number(), v.integer()), 0),
  id: v.optional(v.string()),
  items: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        genre_ids: v.optional(v.array(v.optional(v.pipe(v.number(), v.integer()), 0))),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        media_type: v.optional(v.string()),
        original_language: v.optional(v.string()),
        original_title: v.optional(v.string()),
        overview: v.optional(v.string()),
        popularity: v.optional(v.number(), 0),
        poster_path: v.optional(v.string()),
        release_date: v.optional(v.string()),
        title: v.optional(v.string()),
        video: v.optional(v.boolean(), true),
        vote_average: v.optional(v.pipe(v.number(), v.integer()), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
  item_count: v.optional(v.pipe(v.number(), v.integer()), 0),
  iso_639_1: v.optional(v.string()),
  name: v.optional(v.string()),
  poster_path: v.optional(v.string()),
});

export const vListCheckItemStatusData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    list_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      movie_id: v.optional(v.pipe(v.number(), v.integer())),
    }),
  ),
});

/**
 * 200
 */
export const vListCheckItemStatusResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  item_present: v.optional(v.boolean(), true),
});

export const vListCreateData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.string(),
    }),
  ),
  path: v.optional(v.never()),
  query: v.object({
    session_id: v.string(),
  }),
});

/**
 * 200
 */
export const vListCreateResponse = v.object({
  status_message: v.optional(v.string()),
  success: v.optional(v.boolean(), true),
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  list_id: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vListAddMovieData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.optional(v.string()),
    }),
  ),
  path: v.object({
    list_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.object({
    session_id: v.string(),
  }),
});

/**
 * 200
 */
export const vListAddMovieResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vListRemoveMovieData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.string(),
    }),
  ),
  path: v.object({
    list_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.object({
    session_id: v.string(),
  }),
});

/**
 * 200
 */
export const vListRemoveMovieResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vListClearData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    list_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.object({
    session_id: v.string(),
    confirm: v.optional(v.boolean(), false),
  }),
});

/**
 * 200
 */
export const vListClearResponse = v.object({
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vNetworkDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    network_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vNetworkDetailsResponse = v.object({
  headquarters: v.optional(v.string()),
  homepage: v.optional(v.string()),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  logo_path: v.optional(v.string()),
  name: v.optional(v.string()),
  origin_country: v.optional(v.string()),
});

export const vDetailsCopyData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    network_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vDetailsCopyResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        name: v.optional(v.string()),
        type: v.optional(v.string()),
      }),
    ),
  ),
});

export const vAlternativeNamesCopyData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    network_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vAlternativeNamesCopyResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  logos: v.optional(
    v.array(
      v.object({
        aspect_ratio: v.optional(v.number(), 0),
        file_path: v.optional(v.string()),
        height: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.string()),
        file_type: v.optional(v.string()),
        vote_average: v.optional(v.number(), 0),
        vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        width: v.optional(v.pipe(v.number(), v.integer()), 0),
      }),
    ),
  ),
});

export const vReviewDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    review_id: v.string(),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vReviewDetailsResponse = v.object({
  id: v.optional(v.string()),
  author: v.optional(v.string()),
  author_details: v.optional(
    v.object({
      name: v.optional(v.string()),
      username: v.optional(v.string()),
      avatar_path: v.optional(v.string()),
      rating: v.optional(v.pipe(v.number(), v.integer()), 0),
    }),
  ),
  content: v.optional(v.string()),
  created_at: v.optional(v.string()),
  iso_639_1: v.optional(v.string()),
  media_id: v.optional(v.pipe(v.number(), v.integer()), 0),
  media_title: v.optional(v.string()),
  media_type: v.optional(v.string()),
  updated_at: v.optional(v.string()),
  url: v.optional(v.string()),
});

export const vAuthenticationValidateKeyData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vAuthenticationValidateKeyResponse = v.object({
  success: v.optional(v.boolean(), true),
  status_code: v.optional(v.pipe(v.number(), v.integer()), 0),
  status_message: v.optional(v.string()),
});

export const vTvSeasonWatchProvidersData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
    season_number: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vTvSeasonWatchProvidersResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.object({
      AE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      AR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      AT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      AU: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BB: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BG: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      BS: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CA: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CH: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CI: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CL: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      CZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      DE: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      DK: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      DO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      DZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      EC: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      EG: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      ES: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      FI: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      FR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GB: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GF: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GH: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GQ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      GT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HK: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HN: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      HU: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      ID: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IE: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IL: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IQ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      IT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      JM: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      JP: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      KE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      KR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      LB: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      LY: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MD: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MK: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MU: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MX: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MY: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      MZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NG: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NL: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NO: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      NZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PH: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PL: v.optional(
        v.object({
          link: v.optional(v.string()),
          rent: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PS: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      PY: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      RO: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      RS: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      RU: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SC: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SG: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SI: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SK: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SN: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      SV: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TH: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TR: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TT: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TW: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      TZ: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      UG: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      US: v.optional(
        v.object({
          link: v.optional(v.string()),
          buy: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          free: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      UY: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      VE: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      ZA: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
      ZM: v.optional(
        v.object({
          link: v.optional(v.string()),
          flatrate: v.optional(
            v.array(
              v.object({
                logo_path: v.optional(v.string()),
                provider_id: v.optional(v.pipe(v.number(), v.integer()), 0),
                provider_name: v.optional(v.string()),
                display_priority: v.optional(v.pipe(v.number(), v.integer()), 0),
              }),
            ),
          ),
        }),
      ),
    }),
  ),
});

export const vConfigurationCountriesData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
    }),
  ),
});

/**
 * 200
 */
export const vConfigurationCountriesResponse = v.array(
  v.object({
    iso_3166_1: v.optional(v.string()),
    english_name: v.optional(v.string()),
    native_name: v.optional(v.string()),
  }),
);

export const vConfigurationJobsData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vConfigurationJobsResponse = v.array(
  v.object({
    department: v.optional(v.string()),
    jobs: v.optional(v.array(v.string())),
  }),
);

export const vConfigurationLanguagesData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vConfigurationLanguagesResponse = v.array(
  v.object({
    iso_639_1: v.optional(v.string()),
    english_name: v.optional(v.string()),
    name: v.optional(v.string()),
  }),
);

export const vConfigurationPrimaryTranslationsData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vConfigurationPrimaryTranslationsResponse = v.array(v.string());

export const vConfigurationTimezonesData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vConfigurationTimezonesResponse = v.array(
  v.object({
    iso_3166_1: v.optional(v.string()),
    zones: v.optional(v.array(v.string())),
  }),
);

export const vAuthenticationCreateSessionFromLoginData = v.object({
  body: v.optional(
    v.object({
      RAW_BODY: v.string(),
    }),
  ),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vAuthenticationCreateSessionFromLoginResponse = v.object({
  success: v.optional(v.boolean(), true),
  expires_at: v.optional(v.string()),
  request_token: v.optional(v.string()),
});

export const vPersonLatestIdData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vPersonLatestIdResponse = v.object({
  adult: v.optional(v.boolean(), true),
  also_known_as: v.optional(v.array(v.unknown())),
  biography: v.optional(v.string()),
  birthday: v.optional(v.unknown()),
  deathday: v.optional(v.unknown()),
  gender: v.optional(v.pipe(v.number(), v.integer()), 0),
  homepage: v.optional(v.unknown()),
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  imdb_id: v.optional(v.unknown()),
  known_for_department: v.optional(v.unknown()),
  name: v.optional(v.string()),
  place_of_birth: v.optional(v.unknown()),
  popularity: v.optional(v.pipe(v.number(), v.integer()), 0),
  profile_path: v.optional(v.unknown()),
});

export const vTvEpisodeChangesByIdData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    episode_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvEpisodeChangesByIdResponse = v.object({
  changes: v.optional(
    v.array(
      v.object({
        key: v.optional(v.string()),
        items: v.optional(
          v.array(
            v.object({
              id: v.optional(v.string()),
              action: v.optional(v.string()),
              time: v.optional(v.string()),
              value: v.optional(v.string()),
            }),
          ),
        ),
      }),
    ),
  ),
});

export const vTvEpisodeGroupDetailsData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    tv_episode_group_id: v.string(),
  }),
  query: v.optional(v.never()),
});

/**
 * 200
 */
export const vTvEpisodeGroupDetailsResponse = v.object({
  description: v.optional(v.string()),
  episode_count: v.optional(v.pipe(v.number(), v.integer()), 0),
  group_count: v.optional(v.pipe(v.number(), v.integer()), 0),
  groups: v.optional(
    v.array(
      v.object({
        id: v.optional(v.string()),
        name: v.optional(v.string()),
        order: v.optional(v.pipe(v.number(), v.integer()), 0),
        episodes: v.optional(
          v.array(
            v.object({
              air_date: v.optional(v.string()),
              episode_number: v.optional(v.pipe(v.number(), v.integer()), 0),
              id: v.optional(v.pipe(v.number(), v.integer()), 0),
              name: v.optional(v.string()),
              overview: v.optional(v.string()),
              production_code: v.optional(v.string()),
              runtime: v.optional(v.unknown()),
              season_number: v.optional(v.pipe(v.number(), v.integer()), 0),
              show_id: v.optional(v.pipe(v.number(), v.integer()), 0),
              still_path: v.optional(v.string()),
              vote_average: v.optional(v.number(), 0),
              vote_count: v.optional(v.pipe(v.number(), v.integer()), 0),
              order: v.optional(v.pipe(v.number(), v.integer()), 0),
            }),
          ),
        ),
        locked: v.optional(v.boolean(), true),
      }),
    ),
  ),
  id: v.optional(v.string()),
  name: v.optional(v.string()),
  network: v.optional(
    v.object({
      id: v.optional(v.pipe(v.number(), v.integer()), 0),
      logo_path: v.optional(v.string()),
      name: v.optional(v.string()),
      origin_country: v.optional(v.string()),
    }),
  ),
  type: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vSearchCompanyData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.object({
    query: v.string(),
    page: v.optional(v.pipe(v.number(), v.integer()), 1),
  }),
});

/**
 * 200
 */
export const vSearchCompanyResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        logo_path: v.optional(v.string()),
        name: v.optional(v.string()),
        origin_country: v.optional(v.string()),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vSearchCollectionData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.object({
    query: v.string(),
    include_adult: v.optional(v.boolean(), false),
    language: v.optional(v.string(), 'en-US'),
    page: v.optional(v.pipe(v.number(), v.integer()), 1),
    region: v.optional(v.string()),
  }),
});

/**
 * 200
 */
export const vSearchCollectionResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        adult: v.optional(v.boolean(), true),
        backdrop_path: v.optional(v.string()),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
        original_language: v.optional(v.string()),
        original_name: v.optional(v.string()),
        overview: v.optional(v.string()),
        poster_path: v.optional(v.string()),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vSearchKeywordData = v.object({
  body: v.optional(v.never()),
  path: v.optional(v.never()),
  query: v.object({
    query: v.string(),
    page: v.optional(v.pipe(v.number(), v.integer()), 1),
  }),
});

/**
 * 200
 */
export const vSearchKeywordResponse = v.object({
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        name: v.optional(v.string()),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});

export const vListsCopyData = v.object({
  body: v.optional(v.never()),
  path: v.object({
    series_id: v.pipe(v.number(), v.integer()),
  }),
  query: v.optional(
    v.object({
      language: v.optional(v.string(), 'en-US'),
      page: v.optional(v.pipe(v.number(), v.integer()), 1),
    }),
  ),
});

/**
 * 200
 */
export const vListsCopyResponse = v.object({
  id: v.optional(v.pipe(v.number(), v.integer()), 0),
  page: v.optional(v.pipe(v.number(), v.integer()), 0),
  results: v.optional(
    v.array(
      v.object({
        description: v.optional(v.string()),
        favorite_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        id: v.optional(v.pipe(v.number(), v.integer()), 0),
        item_count: v.optional(v.pipe(v.number(), v.integer()), 0),
        iso_639_1: v.optional(v.string()),
        iso_3166_1: v.optional(v.string()),
        name: v.optional(v.string()),
        poster_path: v.optional(v.unknown()),
      }),
    ),
  ),
  total_pages: v.optional(v.pipe(v.number(), v.integer()), 0),
  total_results: v.optional(v.pipe(v.number(), v.integer()), 0),
});
